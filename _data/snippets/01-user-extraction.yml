files:
  - Settings.java
  - UserFilter.java
  - ApplicationContext.java
  - UserAccount.java

Settings.java: |+2
  ```java
  public class Settings {
      @Override
      public List<Class<?>> getFilters() {
          return Arrays.asList(
              UserFilter.class
          );
      }
  }
  ```

UserFilter.java: |+2
  ```java
  public class UserFilter implements ContainerRequestFilter {
      @Override
      public void filter(ContainerRequestContext requestContext) throws IOException {
          UserAccount user = new UserAccount();
          String userId = requestContext.getHeaderString("X-User-ID");
          user.id = Long.parseLong(userId);
          user.name = requestContext.getHeaderString("X-User-Name");
          requestContext.setSecurityContext(new ApplicationContext(user));
      }
  }
  ```

ApplicationContext.java: |+2
  ```java
  public class ApplicationContext implements SecurityContext {
      private final UserAccount principal;

      public ApplicationContext(UserAccount principal) {
          this.principal = principal;
      }

      @Override
      public Principal getUserPrincipal() {
          return principal;
      }

      @Override
      public boolean isUserInRole(String role) {
          return false;
      }

      @Override
      public boolean isSecure() {
          return false;
      }

      @Override
      public String getAuthenticationScheme() {
          return "custom";
      }
  }
  ```

UserAccount.java: |+2
  ```java
  @Include(rootLevel = true)
  @Entity
  public class UserAccount implements Principal {
      @Id
      public long id = 0;

      public String name = "";

      public static enum UserType {
          UNKNOWN(0),
          MEMBER(100),
          ADMIN(500),
          SUPERUSER(1000),
          ;

          private final int level;
          private UserType(int level) {
              this.level = level;
          }

          public boolean atLeast(UserType user) {
              return user.level >= this.level;
          }
      }

      public UserType type() {
          switch ((int) id) {
              case 1: return UserType.SUPERUSER;
              case 2: return UserType.ADMIN;
              case 3: return UserType.MEMBER;
              default: return UserType.UNKNOWN;
          }
      }

      @Override
      public String getName() {
          return name;
      }

      @Override
      public boolean implies(Subject subject) {
          return false;
      }
  }
  ```
