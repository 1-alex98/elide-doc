files:
  - Settings.java
  - UserChecks.java

Settings.java: |+2
  ```java
  public class Settings {
      @Override
      public Map<String, Class<? extends Check>> getCheckMappings() {
          return ImmutableMap.of(
              "user is superuser", UserChecks.SuperuserCheck.class,
              "user is admin", UserChecks.AdminCheck.class,
              "user is member", UserChecks.MemberCheck.class
          );
      }
  }
  ```

UserChecks.java: |+2
  ```java
  public class UserChecks {
      private static UserType userType(RequestScope requestScope) {
          UserAccount user = (UserAccount) requestScope.getUser().getOpaqueUser();
          return user.type();
      }

      public static class SuperuserCheck extends OperationCheck<Object> {
          @Override
          public boolean ok(Object o, RequestScope requestScope, Optional<ChangeSpec> optional) {
              return userType(requestScope).atLeast(UserType.SUPERUSER);
          }
      }

      public static class AdminCheck extends OperationCheck<Object> {
          @Override
          public boolean ok(Object record, RequestScope requestScope, Optional<ChangeSpec> optional) {
              return userType(requestScope).atLeast(UserType.ADMIN);
          }
      }

      public static class MemberCheck extends OperationCheck<Object> {
          @Override
          public boolean ok(Object o, RequestScope requestScope, Optional<ChangeSpec> optional) {
              return userType(requestScope).atLeast(UserType.MEMBER);
          }
      }
  }
  ```
